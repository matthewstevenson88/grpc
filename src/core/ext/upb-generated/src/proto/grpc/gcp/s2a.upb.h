/* This file was generated by upbc (the upb compiler) from the input
 * file:
 *
 *     src/proto/grpc/gcp/s2a.proto
 *
 * Do not edit -- your changes will be discarded when the file is
 * regenerated. */

#ifndef SRC_PROTO_GRPC_GCP_S2A_PROTO_UPB_H_
#define SRC_PROTO_GRPC_GCP_S2A_PROTO_UPB_H_

#include "upb/generated_util.h"
#include "upb/msg.h"
#include "upb/decode.h"
#include "upb/encode.h"

#include "upb/port_def.inc"

#ifdef __cplusplus
extern "C" {
#endif

struct s2a_Identity;
struct s2a_Identity_AttributesEntry;
struct s2a_ClientSessionStartReq;
struct s2a_ServerSessionStartReq;
struct s2a_SessionNextReq;
struct s2a_ResumptionTicketReq;
struct s2a_SessionReq;
struct s2a_SessionState;
struct s2a_SessionResult;
struct s2a_SessionStatus;
struct s2a_SessionResp;
typedef struct s2a_Identity s2a_Identity;
typedef struct s2a_Identity_AttributesEntry s2a_Identity_AttributesEntry;
typedef struct s2a_ClientSessionStartReq s2a_ClientSessionStartReq;
typedef struct s2a_ServerSessionStartReq s2a_ServerSessionStartReq;
typedef struct s2a_SessionNextReq s2a_SessionNextReq;
typedef struct s2a_ResumptionTicketReq s2a_ResumptionTicketReq;
typedef struct s2a_SessionReq s2a_SessionReq;
typedef struct s2a_SessionState s2a_SessionState;
typedef struct s2a_SessionResult s2a_SessionResult;
typedef struct s2a_SessionStatus s2a_SessionStatus;
typedef struct s2a_SessionResp s2a_SessionResp;
extern const upb_msglayout s2a_Identity_msginit;
extern const upb_msglayout s2a_Identity_AttributesEntry_msginit;
extern const upb_msglayout s2a_ClientSessionStartReq_msginit;
extern const upb_msglayout s2a_ServerSessionStartReq_msginit;
extern const upb_msglayout s2a_SessionNextReq_msginit;
extern const upb_msglayout s2a_ResumptionTicketReq_msginit;
extern const upb_msglayout s2a_SessionReq_msginit;
extern const upb_msglayout s2a_SessionState_msginit;
extern const upb_msglayout s2a_SessionResult_msginit;
extern const upb_msglayout s2a_SessionStatus_msginit;
extern const upb_msglayout s2a_SessionResp_msginit;

typedef enum {
  s2a_AES_128_GCM_SHA256 = 0,
  s2a_AES_256_GCM_SHA384 = 1,
  s2a_CHACHA20_POLY1305_SHA256 = 2
} s2a_Ciphersuite;

typedef enum {
  s2a_TLS1_2 = 0,
  s2a_TLS1_3 = 1
} s2a_TLSVersion;


/* s2a.Identity */

UPB_INLINE s2a_Identity *s2a_Identity_new(upb_arena *arena) {
  return (s2a_Identity *)upb_msg_new(&s2a_Identity_msginit, arena);
}
UPB_INLINE s2a_Identity *s2a_Identity_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  s2a_Identity *ret = s2a_Identity_new(arena);
  return (ret && upb_decode(buf, size, ret, &s2a_Identity_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *s2a_Identity_serialize(const s2a_Identity *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &s2a_Identity_msginit, arena, len);
}

typedef enum {
  s2a_Identity_identity_oneof_spiffe_id = 1,
  s2a_Identity_identity_oneof_hostname = 2,
  s2a_Identity_identity_oneof_NOT_SET = 0
} s2a_Identity_identity_oneof_oneofcases;
UPB_INLINE s2a_Identity_identity_oneof_oneofcases s2a_Identity_identity_oneof_case(const s2a_Identity* msg) { return (s2a_Identity_identity_oneof_oneofcases)UPB_FIELD_AT(msg, int32_t, UPB_SIZE(12, 24)); }

UPB_INLINE bool s2a_Identity_has_spiffe_id(const s2a_Identity *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 1); }
UPB_INLINE upb_strview s2a_Identity_spiffe_id(const s2a_Identity *msg) { return UPB_READ_ONEOF(msg, upb_strview, UPB_SIZE(4, 8), UPB_SIZE(12, 24), 1, upb_strview_make("", strlen(""))); }
UPB_INLINE bool s2a_Identity_has_hostname(const s2a_Identity *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(12, 24), 2); }
UPB_INLINE upb_strview s2a_Identity_hostname(const s2a_Identity *msg) { return UPB_READ_ONEOF(msg, upb_strview, UPB_SIZE(4, 8), UPB_SIZE(12, 24), 2, upb_strview_make("", strlen(""))); }
UPB_INLINE const s2a_Identity_AttributesEntry* const* s2a_Identity_attributes(const s2a_Identity *msg, size_t *len) { return (const s2a_Identity_AttributesEntry* const*)_upb_array_accessor(msg, UPB_SIZE(0, 0), len); }

UPB_INLINE void s2a_Identity_set_spiffe_id(s2a_Identity *msg, upb_strview value) {
  UPB_WRITE_ONEOF(msg, upb_strview, UPB_SIZE(4, 8), value, UPB_SIZE(12, 24), 1);
}
UPB_INLINE void s2a_Identity_set_hostname(s2a_Identity *msg, upb_strview value) {
  UPB_WRITE_ONEOF(msg, upb_strview, UPB_SIZE(4, 8), value, UPB_SIZE(12, 24), 2);
}
UPB_INLINE s2a_Identity_AttributesEntry** s2a_Identity_mutable_attributes(s2a_Identity *msg, size_t *len) {
  return (s2a_Identity_AttributesEntry**)_upb_array_mutable_accessor(msg, UPB_SIZE(0, 0), len);
}
UPB_INLINE s2a_Identity_AttributesEntry** s2a_Identity_resize_attributes(s2a_Identity *msg, size_t len, upb_arena *arena) {
  return (s2a_Identity_AttributesEntry**)_upb_array_resize_accessor(msg, UPB_SIZE(0, 0), len, UPB_SIZE(4, 8), UPB_TYPE_MESSAGE, arena);
}
UPB_INLINE struct s2a_Identity_AttributesEntry* s2a_Identity_add_attributes(s2a_Identity *msg, upb_arena *arena) {
  struct s2a_Identity_AttributesEntry* sub = (struct s2a_Identity_AttributesEntry*)upb_msg_new(&s2a_Identity_AttributesEntry_msginit, arena);
  bool ok = _upb_array_append_accessor(
      msg, UPB_SIZE(0, 0), UPB_SIZE(4, 8), UPB_TYPE_MESSAGE, &sub, arena);
  if (!ok) return NULL;
  return sub;
}

/* s2a.Identity.AttributesEntry */

UPB_INLINE s2a_Identity_AttributesEntry *s2a_Identity_AttributesEntry_new(upb_arena *arena) {
  return (s2a_Identity_AttributesEntry *)upb_msg_new(&s2a_Identity_AttributesEntry_msginit, arena);
}
UPB_INLINE s2a_Identity_AttributesEntry *s2a_Identity_AttributesEntry_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  s2a_Identity_AttributesEntry *ret = s2a_Identity_AttributesEntry_new(arena);
  return (ret && upb_decode(buf, size, ret, &s2a_Identity_AttributesEntry_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *s2a_Identity_AttributesEntry_serialize(const s2a_Identity_AttributesEntry *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &s2a_Identity_AttributesEntry_msginit, arena, len);
}

UPB_INLINE upb_strview s2a_Identity_AttributesEntry_key(const s2a_Identity_AttributesEntry *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(0, 0)); }
UPB_INLINE upb_strview s2a_Identity_AttributesEntry_value(const s2a_Identity_AttributesEntry *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(8, 16)); }

UPB_INLINE void s2a_Identity_AttributesEntry_set_key(s2a_Identity_AttributesEntry *msg, upb_strview value) {
  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(0, 0)) = value;
}
UPB_INLINE void s2a_Identity_AttributesEntry_set_value(s2a_Identity_AttributesEntry *msg, upb_strview value) {
  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(8, 16)) = value;
}

/* s2a.ClientSessionStartReq */

UPB_INLINE s2a_ClientSessionStartReq *s2a_ClientSessionStartReq_new(upb_arena *arena) {
  return (s2a_ClientSessionStartReq *)upb_msg_new(&s2a_ClientSessionStartReq_msginit, arena);
}
UPB_INLINE s2a_ClientSessionStartReq *s2a_ClientSessionStartReq_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  s2a_ClientSessionStartReq *ret = s2a_ClientSessionStartReq_new(arena);
  return (ret && upb_decode(buf, size, ret, &s2a_ClientSessionStartReq_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *s2a_ClientSessionStartReq_serialize(const s2a_ClientSessionStartReq *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &s2a_ClientSessionStartReq_msginit, arena, len);
}

UPB_INLINE upb_strview const* s2a_ClientSessionStartReq_application_protocols(const s2a_ClientSessionStartReq *msg, size_t *len) { return (upb_strview const*)_upb_array_accessor(msg, UPB_SIZE(28, 40), len); }
UPB_INLINE int32_t s2a_ClientSessionStartReq_min_tls_version(const s2a_ClientSessionStartReq *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(0, 0)); }
UPB_INLINE int32_t s2a_ClientSessionStartReq_max_tls_version(const s2a_ClientSessionStartReq *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(8, 8)); }
UPB_INLINE int32_t const* s2a_ClientSessionStartReq_tls_ciphersuites(const s2a_ClientSessionStartReq *msg, size_t *len) { return (int32_t const*)_upb_array_accessor(msg, UPB_SIZE(32, 48), len); }
UPB_INLINE const s2a_Identity* const* s2a_ClientSessionStartReq_target_identities(const s2a_ClientSessionStartReq *msg, size_t *len) { return (const s2a_Identity* const*)_upb_array_accessor(msg, UPB_SIZE(36, 56), len); }
UPB_INLINE const s2a_Identity* s2a_ClientSessionStartReq_local_identity(const s2a_ClientSessionStartReq *msg) { return UPB_FIELD_AT(msg, const s2a_Identity*, UPB_SIZE(24, 32)); }
UPB_INLINE upb_strview s2a_ClientSessionStartReq_target_name(const s2a_ClientSessionStartReq *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(16, 16)); }

UPB_INLINE upb_strview* s2a_ClientSessionStartReq_mutable_application_protocols(s2a_ClientSessionStartReq *msg, size_t *len) {
  return (upb_strview*)_upb_array_mutable_accessor(msg, UPB_SIZE(28, 40), len);
}
UPB_INLINE upb_strview* s2a_ClientSessionStartReq_resize_application_protocols(s2a_ClientSessionStartReq *msg, size_t len, upb_arena *arena) {
  return (upb_strview*)_upb_array_resize_accessor(msg, UPB_SIZE(28, 40), len, UPB_SIZE(8, 16), UPB_TYPE_STRING, arena);
}
UPB_INLINE bool s2a_ClientSessionStartReq_add_application_protocols(s2a_ClientSessionStartReq *msg, upb_strview val, upb_arena *arena) {
  return _upb_array_append_accessor(
      msg, UPB_SIZE(28, 40), UPB_SIZE(8, 16), UPB_TYPE_STRING, &val, arena);
}
UPB_INLINE void s2a_ClientSessionStartReq_set_min_tls_version(s2a_ClientSessionStartReq *msg, int32_t value) {
  UPB_FIELD_AT(msg, int32_t, UPB_SIZE(0, 0)) = value;
}
UPB_INLINE void s2a_ClientSessionStartReq_set_max_tls_version(s2a_ClientSessionStartReq *msg, int32_t value) {
  UPB_FIELD_AT(msg, int32_t, UPB_SIZE(8, 8)) = value;
}
UPB_INLINE int32_t* s2a_ClientSessionStartReq_mutable_tls_ciphersuites(s2a_ClientSessionStartReq *msg, size_t *len) {
  return (int32_t*)_upb_array_mutable_accessor(msg, UPB_SIZE(32, 48), len);
}
UPB_INLINE int32_t* s2a_ClientSessionStartReq_resize_tls_ciphersuites(s2a_ClientSessionStartReq *msg, size_t len, upb_arena *arena) {
  return (int32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(32, 48), len, UPB_SIZE(8, 8), UPB_TYPE_ENUM, arena);
}
UPB_INLINE bool s2a_ClientSessionStartReq_add_tls_ciphersuites(s2a_ClientSessionStartReq *msg, int32_t val, upb_arena *arena) {
  return _upb_array_append_accessor(
      msg, UPB_SIZE(32, 48), UPB_SIZE(8, 8), UPB_TYPE_ENUM, &val, arena);
}
UPB_INLINE s2a_Identity** s2a_ClientSessionStartReq_mutable_target_identities(s2a_ClientSessionStartReq *msg, size_t *len) {
  return (s2a_Identity**)_upb_array_mutable_accessor(msg, UPB_SIZE(36, 56), len);
}
UPB_INLINE s2a_Identity** s2a_ClientSessionStartReq_resize_target_identities(s2a_ClientSessionStartReq *msg, size_t len, upb_arena *arena) {
  return (s2a_Identity**)_upb_array_resize_accessor(msg, UPB_SIZE(36, 56), len, UPB_SIZE(4, 8), UPB_TYPE_MESSAGE, arena);
}
UPB_INLINE struct s2a_Identity* s2a_ClientSessionStartReq_add_target_identities(s2a_ClientSessionStartReq *msg, upb_arena *arena) {
  struct s2a_Identity* sub = (struct s2a_Identity*)upb_msg_new(&s2a_Identity_msginit, arena);
  bool ok = _upb_array_append_accessor(
      msg, UPB_SIZE(36, 56), UPB_SIZE(4, 8), UPB_TYPE_MESSAGE, &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE void s2a_ClientSessionStartReq_set_local_identity(s2a_ClientSessionStartReq *msg, s2a_Identity* value) {
  UPB_FIELD_AT(msg, s2a_Identity*, UPB_SIZE(24, 32)) = value;
}
UPB_INLINE struct s2a_Identity* s2a_ClientSessionStartReq_mutable_local_identity(s2a_ClientSessionStartReq *msg, upb_arena *arena) {
  struct s2a_Identity* sub = (struct s2a_Identity*)s2a_ClientSessionStartReq_local_identity(msg);
  if (sub == NULL) {
    sub = (struct s2a_Identity*)upb_msg_new(&s2a_Identity_msginit, arena);
    if (!sub) return NULL;
    s2a_ClientSessionStartReq_set_local_identity(msg, sub);
  }
  return sub;
}
UPB_INLINE void s2a_ClientSessionStartReq_set_target_name(s2a_ClientSessionStartReq *msg, upb_strview value) {
  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(16, 16)) = value;
}

/* s2a.ServerSessionStartReq */

UPB_INLINE s2a_ServerSessionStartReq *s2a_ServerSessionStartReq_new(upb_arena *arena) {
  return (s2a_ServerSessionStartReq *)upb_msg_new(&s2a_ServerSessionStartReq_msginit, arena);
}
UPB_INLINE s2a_ServerSessionStartReq *s2a_ServerSessionStartReq_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  s2a_ServerSessionStartReq *ret = s2a_ServerSessionStartReq_new(arena);
  return (ret && upb_decode(buf, size, ret, &s2a_ServerSessionStartReq_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *s2a_ServerSessionStartReq_serialize(const s2a_ServerSessionStartReq *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &s2a_ServerSessionStartReq_msginit, arena, len);
}

UPB_INLINE upb_strview const* s2a_ServerSessionStartReq_application_protocols(const s2a_ServerSessionStartReq *msg, size_t *len) { return (upb_strview const*)_upb_array_accessor(msg, UPB_SIZE(24, 32), len); }
UPB_INLINE int32_t s2a_ServerSessionStartReq_min_tls_version(const s2a_ServerSessionStartReq *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(0, 0)); }
UPB_INLINE int32_t s2a_ServerSessionStartReq_max_tls_version(const s2a_ServerSessionStartReq *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(8, 8)); }
UPB_INLINE int32_t const* s2a_ServerSessionStartReq_tls_ciphersuites(const s2a_ServerSessionStartReq *msg, size_t *len) { return (int32_t const*)_upb_array_accessor(msg, UPB_SIZE(28, 40), len); }
UPB_INLINE const s2a_Identity* const* s2a_ServerSessionStartReq_local_identities(const s2a_ServerSessionStartReq *msg, size_t *len) { return (const s2a_Identity* const*)_upb_array_accessor(msg, UPB_SIZE(32, 48), len); }
UPB_INLINE upb_strview s2a_ServerSessionStartReq_in_bytes(const s2a_ServerSessionStartReq *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(16, 16)); }

UPB_INLINE upb_strview* s2a_ServerSessionStartReq_mutable_application_protocols(s2a_ServerSessionStartReq *msg, size_t *len) {
  return (upb_strview*)_upb_array_mutable_accessor(msg, UPB_SIZE(24, 32), len);
}
UPB_INLINE upb_strview* s2a_ServerSessionStartReq_resize_application_protocols(s2a_ServerSessionStartReq *msg, size_t len, upb_arena *arena) {
  return (upb_strview*)_upb_array_resize_accessor(msg, UPB_SIZE(24, 32), len, UPB_SIZE(8, 16), UPB_TYPE_STRING, arena);
}
UPB_INLINE bool s2a_ServerSessionStartReq_add_application_protocols(s2a_ServerSessionStartReq *msg, upb_strview val, upb_arena *arena) {
  return _upb_array_append_accessor(
      msg, UPB_SIZE(24, 32), UPB_SIZE(8, 16), UPB_TYPE_STRING, &val, arena);
}
UPB_INLINE void s2a_ServerSessionStartReq_set_min_tls_version(s2a_ServerSessionStartReq *msg, int32_t value) {
  UPB_FIELD_AT(msg, int32_t, UPB_SIZE(0, 0)) = value;
}
UPB_INLINE void s2a_ServerSessionStartReq_set_max_tls_version(s2a_ServerSessionStartReq *msg, int32_t value) {
  UPB_FIELD_AT(msg, int32_t, UPB_SIZE(8, 8)) = value;
}
UPB_INLINE int32_t* s2a_ServerSessionStartReq_mutable_tls_ciphersuites(s2a_ServerSessionStartReq *msg, size_t *len) {
  return (int32_t*)_upb_array_mutable_accessor(msg, UPB_SIZE(28, 40), len);
}
UPB_INLINE int32_t* s2a_ServerSessionStartReq_resize_tls_ciphersuites(s2a_ServerSessionStartReq *msg, size_t len, upb_arena *arena) {
  return (int32_t*)_upb_array_resize_accessor(msg, UPB_SIZE(28, 40), len, UPB_SIZE(8, 8), UPB_TYPE_ENUM, arena);
}
UPB_INLINE bool s2a_ServerSessionStartReq_add_tls_ciphersuites(s2a_ServerSessionStartReq *msg, int32_t val, upb_arena *arena) {
  return _upb_array_append_accessor(
      msg, UPB_SIZE(28, 40), UPB_SIZE(8, 8), UPB_TYPE_ENUM, &val, arena);
}
UPB_INLINE s2a_Identity** s2a_ServerSessionStartReq_mutable_local_identities(s2a_ServerSessionStartReq *msg, size_t *len) {
  return (s2a_Identity**)_upb_array_mutable_accessor(msg, UPB_SIZE(32, 48), len);
}
UPB_INLINE s2a_Identity** s2a_ServerSessionStartReq_resize_local_identities(s2a_ServerSessionStartReq *msg, size_t len, upb_arena *arena) {
  return (s2a_Identity**)_upb_array_resize_accessor(msg, UPB_SIZE(32, 48), len, UPB_SIZE(4, 8), UPB_TYPE_MESSAGE, arena);
}
UPB_INLINE struct s2a_Identity* s2a_ServerSessionStartReq_add_local_identities(s2a_ServerSessionStartReq *msg, upb_arena *arena) {
  struct s2a_Identity* sub = (struct s2a_Identity*)upb_msg_new(&s2a_Identity_msginit, arena);
  bool ok = _upb_array_append_accessor(
      msg, UPB_SIZE(32, 48), UPB_SIZE(4, 8), UPB_TYPE_MESSAGE, &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE void s2a_ServerSessionStartReq_set_in_bytes(s2a_ServerSessionStartReq *msg, upb_strview value) {
  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(16, 16)) = value;
}

/* s2a.SessionNextReq */

UPB_INLINE s2a_SessionNextReq *s2a_SessionNextReq_new(upb_arena *arena) {
  return (s2a_SessionNextReq *)upb_msg_new(&s2a_SessionNextReq_msginit, arena);
}
UPB_INLINE s2a_SessionNextReq *s2a_SessionNextReq_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  s2a_SessionNextReq *ret = s2a_SessionNextReq_new(arena);
  return (ret && upb_decode(buf, size, ret, &s2a_SessionNextReq_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *s2a_SessionNextReq_serialize(const s2a_SessionNextReq *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &s2a_SessionNextReq_msginit, arena, len);
}

UPB_INLINE upb_strview s2a_SessionNextReq_in_bytes(const s2a_SessionNextReq *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(0, 0)); }

UPB_INLINE void s2a_SessionNextReq_set_in_bytes(s2a_SessionNextReq *msg, upb_strview value) {
  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(0, 0)) = value;
}

/* s2a.ResumptionTicketReq */

UPB_INLINE s2a_ResumptionTicketReq *s2a_ResumptionTicketReq_new(upb_arena *arena) {
  return (s2a_ResumptionTicketReq *)upb_msg_new(&s2a_ResumptionTicketReq_msginit, arena);
}
UPB_INLINE s2a_ResumptionTicketReq *s2a_ResumptionTicketReq_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  s2a_ResumptionTicketReq *ret = s2a_ResumptionTicketReq_new(arena);
  return (ret && upb_decode(buf, size, ret, &s2a_ResumptionTicketReq_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *s2a_ResumptionTicketReq_serialize(const s2a_ResumptionTicketReq *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &s2a_ResumptionTicketReq_msginit, arena, len);
}

UPB_INLINE upb_strview s2a_ResumptionTicketReq_in_bytes(const s2a_ResumptionTicketReq *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(0, 0)); }

UPB_INLINE void s2a_ResumptionTicketReq_set_in_bytes(s2a_ResumptionTicketReq *msg, upb_strview value) {
  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(0, 0)) = value;
}

/* s2a.SessionReq */

UPB_INLINE s2a_SessionReq *s2a_SessionReq_new(upb_arena *arena) {
  return (s2a_SessionReq *)upb_msg_new(&s2a_SessionReq_msginit, arena);
}
UPB_INLINE s2a_SessionReq *s2a_SessionReq_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  s2a_SessionReq *ret = s2a_SessionReq_new(arena);
  return (ret && upb_decode(buf, size, ret, &s2a_SessionReq_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *s2a_SessionReq_serialize(const s2a_SessionReq *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &s2a_SessionReq_msginit, arena, len);
}

typedef enum {
  s2a_SessionReq_req_oneof_client_start = 1,
  s2a_SessionReq_req_oneof_server_start = 2,
  s2a_SessionReq_req_oneof_next = 3,
  s2a_SessionReq_req_oneof_resumption_ticket = 4,
  s2a_SessionReq_req_oneof_NOT_SET = 0
} s2a_SessionReq_req_oneof_oneofcases;
UPB_INLINE s2a_SessionReq_req_oneof_oneofcases s2a_SessionReq_req_oneof_case(const s2a_SessionReq* msg) { return (s2a_SessionReq_req_oneof_oneofcases)UPB_FIELD_AT(msg, int32_t, UPB_SIZE(4, 8)); }

UPB_INLINE bool s2a_SessionReq_has_client_start(const s2a_SessionReq *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(4, 8), 1); }
UPB_INLINE const s2a_ClientSessionStartReq* s2a_SessionReq_client_start(const s2a_SessionReq *msg) { return UPB_READ_ONEOF(msg, const s2a_ClientSessionStartReq*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 1, NULL); }
UPB_INLINE bool s2a_SessionReq_has_server_start(const s2a_SessionReq *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(4, 8), 2); }
UPB_INLINE const s2a_ServerSessionStartReq* s2a_SessionReq_server_start(const s2a_SessionReq *msg) { return UPB_READ_ONEOF(msg, const s2a_ServerSessionStartReq*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 2, NULL); }
UPB_INLINE bool s2a_SessionReq_has_next(const s2a_SessionReq *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(4, 8), 3); }
UPB_INLINE const s2a_SessionNextReq* s2a_SessionReq_next(const s2a_SessionReq *msg) { return UPB_READ_ONEOF(msg, const s2a_SessionNextReq*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 3, NULL); }
UPB_INLINE bool s2a_SessionReq_has_resumption_ticket(const s2a_SessionReq *msg) { return _upb_has_oneof_field(msg, UPB_SIZE(4, 8), 4); }
UPB_INLINE const s2a_ResumptionTicketReq* s2a_SessionReq_resumption_ticket(const s2a_SessionReq *msg) { return UPB_READ_ONEOF(msg, const s2a_ResumptionTicketReq*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 4, NULL); }

UPB_INLINE void s2a_SessionReq_set_client_start(s2a_SessionReq *msg, s2a_ClientSessionStartReq* value) {
  UPB_WRITE_ONEOF(msg, s2a_ClientSessionStartReq*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 1);
}
UPB_INLINE struct s2a_ClientSessionStartReq* s2a_SessionReq_mutable_client_start(s2a_SessionReq *msg, upb_arena *arena) {
  struct s2a_ClientSessionStartReq* sub = (struct s2a_ClientSessionStartReq*)s2a_SessionReq_client_start(msg);
  if (sub == NULL) {
    sub = (struct s2a_ClientSessionStartReq*)upb_msg_new(&s2a_ClientSessionStartReq_msginit, arena);
    if (!sub) return NULL;
    s2a_SessionReq_set_client_start(msg, sub);
  }
  return sub;
}
UPB_INLINE void s2a_SessionReq_set_server_start(s2a_SessionReq *msg, s2a_ServerSessionStartReq* value) {
  UPB_WRITE_ONEOF(msg, s2a_ServerSessionStartReq*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 2);
}
UPB_INLINE struct s2a_ServerSessionStartReq* s2a_SessionReq_mutable_server_start(s2a_SessionReq *msg, upb_arena *arena) {
  struct s2a_ServerSessionStartReq* sub = (struct s2a_ServerSessionStartReq*)s2a_SessionReq_server_start(msg);
  if (sub == NULL) {
    sub = (struct s2a_ServerSessionStartReq*)upb_msg_new(&s2a_ServerSessionStartReq_msginit, arena);
    if (!sub) return NULL;
    s2a_SessionReq_set_server_start(msg, sub);
  }
  return sub;
}
UPB_INLINE void s2a_SessionReq_set_next(s2a_SessionReq *msg, s2a_SessionNextReq* value) {
  UPB_WRITE_ONEOF(msg, s2a_SessionNextReq*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 3);
}
UPB_INLINE struct s2a_SessionNextReq* s2a_SessionReq_mutable_next(s2a_SessionReq *msg, upb_arena *arena) {
  struct s2a_SessionNextReq* sub = (struct s2a_SessionNextReq*)s2a_SessionReq_next(msg);
  if (sub == NULL) {
    sub = (struct s2a_SessionNextReq*)upb_msg_new(&s2a_SessionNextReq_msginit, arena);
    if (!sub) return NULL;
    s2a_SessionReq_set_next(msg, sub);
  }
  return sub;
}
UPB_INLINE void s2a_SessionReq_set_resumption_ticket(s2a_SessionReq *msg, s2a_ResumptionTicketReq* value) {
  UPB_WRITE_ONEOF(msg, s2a_ResumptionTicketReq*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 4);
}
UPB_INLINE struct s2a_ResumptionTicketReq* s2a_SessionReq_mutable_resumption_ticket(s2a_SessionReq *msg, upb_arena *arena) {
  struct s2a_ResumptionTicketReq* sub = (struct s2a_ResumptionTicketReq*)s2a_SessionReq_resumption_ticket(msg);
  if (sub == NULL) {
    sub = (struct s2a_ResumptionTicketReq*)upb_msg_new(&s2a_ResumptionTicketReq_msginit, arena);
    if (!sub) return NULL;
    s2a_SessionReq_set_resumption_ticket(msg, sub);
  }
  return sub;
}

/* s2a.SessionState */

UPB_INLINE s2a_SessionState *s2a_SessionState_new(upb_arena *arena) {
  return (s2a_SessionState *)upb_msg_new(&s2a_SessionState_msginit, arena);
}
UPB_INLINE s2a_SessionState *s2a_SessionState_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  s2a_SessionState *ret = s2a_SessionState_new(arena);
  return (ret && upb_decode(buf, size, ret, &s2a_SessionState_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *s2a_SessionState_serialize(const s2a_SessionState *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &s2a_SessionState_msginit, arena, len);
}

UPB_INLINE int32_t s2a_SessionState_tls_version(const s2a_SessionState *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(0, 0)); }
UPB_INLINE int32_t s2a_SessionState_tls_ciphersuite(const s2a_SessionState *msg) { return UPB_FIELD_AT(msg, int32_t, UPB_SIZE(8, 8)); }
UPB_INLINE uint64_t s2a_SessionState_in_sequence(const s2a_SessionState *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(16, 16)); }
UPB_INLINE uint64_t s2a_SessionState_out_sequence(const s2a_SessionState *msg) { return UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(24, 24)); }
UPB_INLINE upb_strview s2a_SessionState_in_key(const s2a_SessionState *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(32, 32)); }
UPB_INLINE upb_strview s2a_SessionState_out_key(const s2a_SessionState *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(40, 48)); }
UPB_INLINE upb_strview s2a_SessionState_in_fixed_nonce(const s2a_SessionState *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(48, 64)); }
UPB_INLINE upb_strview s2a_SessionState_out_fixed_nonce(const s2a_SessionState *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(56, 80)); }
UPB_INLINE upb_strview s2a_SessionState_in_mac_secret(const s2a_SessionState *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(64, 96)); }
UPB_INLINE upb_strview s2a_SessionState_out_mac_secret(const s2a_SessionState *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(72, 112)); }

UPB_INLINE void s2a_SessionState_set_tls_version(s2a_SessionState *msg, int32_t value) {
  UPB_FIELD_AT(msg, int32_t, UPB_SIZE(0, 0)) = value;
}
UPB_INLINE void s2a_SessionState_set_tls_ciphersuite(s2a_SessionState *msg, int32_t value) {
  UPB_FIELD_AT(msg, int32_t, UPB_SIZE(8, 8)) = value;
}
UPB_INLINE void s2a_SessionState_set_in_sequence(s2a_SessionState *msg, uint64_t value) {
  UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(16, 16)) = value;
}
UPB_INLINE void s2a_SessionState_set_out_sequence(s2a_SessionState *msg, uint64_t value) {
  UPB_FIELD_AT(msg, uint64_t, UPB_SIZE(24, 24)) = value;
}
UPB_INLINE void s2a_SessionState_set_in_key(s2a_SessionState *msg, upb_strview value) {
  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(32, 32)) = value;
}
UPB_INLINE void s2a_SessionState_set_out_key(s2a_SessionState *msg, upb_strview value) {
  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(40, 48)) = value;
}
UPB_INLINE void s2a_SessionState_set_in_fixed_nonce(s2a_SessionState *msg, upb_strview value) {
  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(48, 64)) = value;
}
UPB_INLINE void s2a_SessionState_set_out_fixed_nonce(s2a_SessionState *msg, upb_strview value) {
  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(56, 80)) = value;
}
UPB_INLINE void s2a_SessionState_set_in_mac_secret(s2a_SessionState *msg, upb_strview value) {
  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(64, 96)) = value;
}
UPB_INLINE void s2a_SessionState_set_out_mac_secret(s2a_SessionState *msg, upb_strview value) {
  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(72, 112)) = value;
}

/* s2a.SessionResult */

UPB_INLINE s2a_SessionResult *s2a_SessionResult_new(upb_arena *arena) {
  return (s2a_SessionResult *)upb_msg_new(&s2a_SessionResult_msginit, arena);
}
UPB_INLINE s2a_SessionResult *s2a_SessionResult_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  s2a_SessionResult *ret = s2a_SessionResult_new(arena);
  return (ret && upb_decode(buf, size, ret, &s2a_SessionResult_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *s2a_SessionResult_serialize(const s2a_SessionResult *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &s2a_SessionResult_msginit, arena, len);
}

UPB_INLINE upb_strview s2a_SessionResult_application_protocol(const s2a_SessionResult *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(0, 0)); }
UPB_INLINE const s2a_SessionState* s2a_SessionResult_state(const s2a_SessionResult *msg) { return UPB_FIELD_AT(msg, const s2a_SessionState*, UPB_SIZE(8, 16)); }
UPB_INLINE const s2a_Identity* s2a_SessionResult_peer_identity(const s2a_SessionResult *msg) { return UPB_FIELD_AT(msg, const s2a_Identity*, UPB_SIZE(12, 24)); }
UPB_INLINE const s2a_Identity* s2a_SessionResult_local_identity(const s2a_SessionResult *msg) { return UPB_FIELD_AT(msg, const s2a_Identity*, UPB_SIZE(16, 32)); }

UPB_INLINE void s2a_SessionResult_set_application_protocol(s2a_SessionResult *msg, upb_strview value) {
  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(0, 0)) = value;
}
UPB_INLINE void s2a_SessionResult_set_state(s2a_SessionResult *msg, s2a_SessionState* value) {
  UPB_FIELD_AT(msg, s2a_SessionState*, UPB_SIZE(8, 16)) = value;
}
UPB_INLINE struct s2a_SessionState* s2a_SessionResult_mutable_state(s2a_SessionResult *msg, upb_arena *arena) {
  struct s2a_SessionState* sub = (struct s2a_SessionState*)s2a_SessionResult_state(msg);
  if (sub == NULL) {
    sub = (struct s2a_SessionState*)upb_msg_new(&s2a_SessionState_msginit, arena);
    if (!sub) return NULL;
    s2a_SessionResult_set_state(msg, sub);
  }
  return sub;
}
UPB_INLINE void s2a_SessionResult_set_peer_identity(s2a_SessionResult *msg, s2a_Identity* value) {
  UPB_FIELD_AT(msg, s2a_Identity*, UPB_SIZE(12, 24)) = value;
}
UPB_INLINE struct s2a_Identity* s2a_SessionResult_mutable_peer_identity(s2a_SessionResult *msg, upb_arena *arena) {
  struct s2a_Identity* sub = (struct s2a_Identity*)s2a_SessionResult_peer_identity(msg);
  if (sub == NULL) {
    sub = (struct s2a_Identity*)upb_msg_new(&s2a_Identity_msginit, arena);
    if (!sub) return NULL;
    s2a_SessionResult_set_peer_identity(msg, sub);
  }
  return sub;
}
UPB_INLINE void s2a_SessionResult_set_local_identity(s2a_SessionResult *msg, s2a_Identity* value) {
  UPB_FIELD_AT(msg, s2a_Identity*, UPB_SIZE(16, 32)) = value;
}
UPB_INLINE struct s2a_Identity* s2a_SessionResult_mutable_local_identity(s2a_SessionResult *msg, upb_arena *arena) {
  struct s2a_Identity* sub = (struct s2a_Identity*)s2a_SessionResult_local_identity(msg);
  if (sub == NULL) {
    sub = (struct s2a_Identity*)upb_msg_new(&s2a_Identity_msginit, arena);
    if (!sub) return NULL;
    s2a_SessionResult_set_local_identity(msg, sub);
  }
  return sub;
}

/* s2a.SessionStatus */

UPB_INLINE s2a_SessionStatus *s2a_SessionStatus_new(upb_arena *arena) {
  return (s2a_SessionStatus *)upb_msg_new(&s2a_SessionStatus_msginit, arena);
}
UPB_INLINE s2a_SessionStatus *s2a_SessionStatus_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  s2a_SessionStatus *ret = s2a_SessionStatus_new(arena);
  return (ret && upb_decode(buf, size, ret, &s2a_SessionStatus_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *s2a_SessionStatus_serialize(const s2a_SessionStatus *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &s2a_SessionStatus_msginit, arena, len);
}

UPB_INLINE uint32_t s2a_SessionStatus_code(const s2a_SessionStatus *msg) { return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(0, 0)); }
UPB_INLINE upb_strview s2a_SessionStatus_details(const s2a_SessionStatus *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(4, 8)); }

UPB_INLINE void s2a_SessionStatus_set_code(s2a_SessionStatus *msg, uint32_t value) {
  UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(0, 0)) = value;
}
UPB_INLINE void s2a_SessionStatus_set_details(s2a_SessionStatus *msg, upb_strview value) {
  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(4, 8)) = value;
}

/* s2a.SessionResp */

UPB_INLINE s2a_SessionResp *s2a_SessionResp_new(upb_arena *arena) {
  return (s2a_SessionResp *)upb_msg_new(&s2a_SessionResp_msginit, arena);
}
UPB_INLINE s2a_SessionResp *s2a_SessionResp_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  s2a_SessionResp *ret = s2a_SessionResp_new(arena);
  return (ret && upb_decode(buf, size, ret, &s2a_SessionResp_msginit, arena)) ? ret : NULL;
}
UPB_INLINE char *s2a_SessionResp_serialize(const s2a_SessionResp *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &s2a_SessionResp_msginit, arena, len);
}

UPB_INLINE upb_strview s2a_SessionResp_out_frames(const s2a_SessionResp *msg) { return UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(4, 8)); }
UPB_INLINE uint32_t s2a_SessionResp_bytes_consumed(const s2a_SessionResp *msg) { return UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(0, 0)); }
UPB_INLINE const s2a_SessionResult* s2a_SessionResp_result(const s2a_SessionResp *msg) { return UPB_FIELD_AT(msg, const s2a_SessionResult*, UPB_SIZE(12, 24)); }
UPB_INLINE const s2a_SessionStatus* s2a_SessionResp_status(const s2a_SessionResp *msg) { return UPB_FIELD_AT(msg, const s2a_SessionStatus*, UPB_SIZE(16, 32)); }

UPB_INLINE void s2a_SessionResp_set_out_frames(s2a_SessionResp *msg, upb_strview value) {
  UPB_FIELD_AT(msg, upb_strview, UPB_SIZE(4, 8)) = value;
}
UPB_INLINE void s2a_SessionResp_set_bytes_consumed(s2a_SessionResp *msg, uint32_t value) {
  UPB_FIELD_AT(msg, uint32_t, UPB_SIZE(0, 0)) = value;
}
UPB_INLINE void s2a_SessionResp_set_result(s2a_SessionResp *msg, s2a_SessionResult* value) {
  UPB_FIELD_AT(msg, s2a_SessionResult*, UPB_SIZE(12, 24)) = value;
}
UPB_INLINE struct s2a_SessionResult* s2a_SessionResp_mutable_result(s2a_SessionResp *msg, upb_arena *arena) {
  struct s2a_SessionResult* sub = (struct s2a_SessionResult*)s2a_SessionResp_result(msg);
  if (sub == NULL) {
    sub = (struct s2a_SessionResult*)upb_msg_new(&s2a_SessionResult_msginit, arena);
    if (!sub) return NULL;
    s2a_SessionResp_set_result(msg, sub);
  }
  return sub;
}
UPB_INLINE void s2a_SessionResp_set_status(s2a_SessionResp *msg, s2a_SessionStatus* value) {
  UPB_FIELD_AT(msg, s2a_SessionStatus*, UPB_SIZE(16, 32)) = value;
}
UPB_INLINE struct s2a_SessionStatus* s2a_SessionResp_mutable_status(s2a_SessionResp *msg, upb_arena *arena) {
  struct s2a_SessionStatus* sub = (struct s2a_SessionStatus*)s2a_SessionResp_status(msg);
  if (sub == NULL) {
    sub = (struct s2a_SessionStatus*)upb_msg_new(&s2a_SessionStatus_msginit, arena);
    if (!sub) return NULL;
    s2a_SessionResp_set_status(msg, sub);
  }
  return sub;
}

#ifdef __cplusplus
}  /* extern "C" */
#endif

#include "upb/port_undef.inc"

#endif  /* SRC_PROTO_GRPC_GCP_S2A_PROTO_UPB_H_ */
