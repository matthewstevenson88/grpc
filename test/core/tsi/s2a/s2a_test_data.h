/*
 *
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#ifndef GRPC_TEST_CORE_TSI_S2A_S2A_TEST_DATA_H
#define GRPC_TEST_CORE_TSI_S2A_S2A_TEST_DATA_H

#include <cstdint>
#include <vector>

namespace s2a_test_data {

/** The following vectors are the traffic secret "kkkk...k", with the length
 *  determined by the ciphersuite. **/
static std::vector<uint8_t> aes_128_gcm_traffic_secret = {
    0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b,
    0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b,
    0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b};
static std::vector<uint8_t> aes_256_gcm_traffic_secret = {
    0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b,
    0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b,
    0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b,
    0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b};
static std::vector<uint8_t> chacha_poly_traffic_secret = {
    0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b,
    0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b,
    0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b};

/** The following vectors are the new traffic secret obtaing from "kkkk...k"
 *  after advancing once. **/
static std::vector<uint8_t> aes_128_gcm_advanced_traffic_secret = {
    243, 139, 148, 85,  234, 88, 113, 35, 90,  105, 252, 55, 97,  12, 108, 161,
    33,  87,  121, 230, 107, 69, 160, 71, 215, 57,  1,   17, 224, 0,  129, 196};
static std::vector<uint8_t> aes_256_gcm_advanced_traffic_secret = {
    1,   108, 131, 93,  182, 100, 190, 181, 82,  106, 155, 179,
    217, 164, 251, 166, 62,  103, 37,  93,  207, 164, 96,  161,
    20,  217, 241, 239, 154, 154, 31,  104, 90,  81,  135, 57,
    245, 87,  208, 230, 111, 219, 137, 189, 175, 162, 98,  87};
static std::vector<uint8_t> chacha_poly_advanced_traffic_secret = {
    243, 139, 148, 85,  234, 88, 113, 35, 90,  105, 252, 55, 97,  12, 108, 161,
    33,  87,  121, 230, 107, 69, 160, 71, 215, 57,  1,   17, 224, 0,  129, 196};

/** The following vectors were generated using a different TLS 1.3
 *  implementation. The keys and nonces are derived from the traffic secret
 *  "kkkk...k", with the length determined by the ciphersuite. **/
static std::vector<uint8_t> aes_128_gcm_key_bytes = {
    0xc3, 0xae, 0x75, 0x09, 0xcf, 0xce, 0xd2, 0xb8,
    0x03, 0xa6, 0x18, 0x69, 0x56, 0xcd, 0xa7, 0x9f};
static std::vector<uint8_t> aes_256_gcm_key_bytes = {
    0xda, 0xc7, 0x31, 0xae, 0x48, 0x66, 0x67, 0x7e, 0xd2, 0xf6, 0x5c,
    0x49, 0x0e, 0x18, 0x81, 0x7b, 0xe5, 0xcb, 0xbb, 0xd0, 0x3f, 0x59,
    0x7a, 0xd5, 0x90, 0x41, 0xc1, 0x17, 0xb7, 0x31, 0x10, 0x9a};
static std::vector<uint8_t> chacha_poly_key_bytes = {
    0x13, 0x0e, 0x20, 0x00, 0x50, 0x8a, 0xce, 0x00, 0xef, 0x26, 0x5e,
    0x17, 0x2d, 0x09, 0x89, 0x2e, 0x46, 0x72, 0x56, 0xcb, 0x90, 0xda,
    0xd9, 0xde, 0x99, 0x53, 0x3c, 0xf5, 0x48, 0xbe, 0x6a, 0x8b};
static std::vector<uint8_t> aes_128_gcm_nonce_bytes = {
    0xb5, 0x80, 0x3d, 0x82, 0xad, 0x88, 0x54, 0xd2, 0xe5, 0x98, 0x18, 0x7f};
static std::vector<uint8_t> aes_256_gcm_nonce_bytes = {
    0x4d, 0xb1, 0x52, 0xd2, 0x7d, 0x18, 0x0b, 0x1e, 0xe4, 0x8f, 0xa8, 0x9d};
static std::vector<uint8_t> chacha_poly_nonce_bytes = {
    0xb5, 0x80, 0x3d, 0x82, 0xad, 0x88, 0x54, 0xd2, 0xe5, 0x98, 0x18, 0x7f};

/** The record_one vectors are obtained by encrypting the plaintext "123456"
 *  using the above keys and sequence number 0. **/
static std::vector<uint8_t> aes_128_gcm_record_one_bytes = {
    0x17, 0x03, 0x03, 0x00, 0x17, 0xf2, 0xe4, 0xe4, 0x11, 0xac,
    0x67, 0x60, 0xe4, 0xe3, 0xf0, 0x74, 0xa3, 0x65, 0x74, 0xc4,
    0x5e, 0xe4, 0xc1, 0x90, 0x61, 0x03, 0xdb, 0x0d};
static std::vector<uint8_t> aes_256_gcm_record_one_bytes = {
    0x17, 0x03, 0x03, 0x00, 0x17, 0x24, 0xef, 0xee, 0x5a, 0xf1,
    0xa6, 0x21, 0x70, 0xad, 0x5a, 0x95, 0xf8, 0x99, 0xd0, 0x38,
    0xb9, 0x65, 0x38, 0x6a, 0x1a, 0x7d, 0xae, 0xd9};
static std::vector<uint8_t> chacha_poly_record_one_bytes = {
    0x17, 0x03, 0x03, 0x00, 0x17, 0xc9, 0x47, 0xff, 0xa4, 0x70,
    0x30, 0x43, 0x70, 0x33, 0x8b, 0xb0, 0x7c, 0xe4, 0x68, 0xe6,
    0xb8, 0xa0, 0x94, 0x4a, 0x33, 0x8b, 0xa4, 0x02};

/** The record_two vectors are obtained by encrypting the plaintext "789123456"
 *  using the above keys and sequence number 1. **/
static std::vector<uint8_t> aes_128_gcm_record_two_bytes = {
    0x17, 0x03, 0x03, 0x00, 0x1a, 0xd7, 0x85, 0x3a, 0xfd, 0x6d, 0x7c,
    0xea, 0xab, 0xab, 0x95, 0x0a, 0x0b, 0x67, 0x07, 0x90, 0x5d, 0x2b,
    0x90, 0x88, 0x94, 0x87, 0x1c, 0x7c, 0x62, 0x02, 0x1f};
static std::vector<uint8_t> aes_256_gcm_record_two_bytes = {
    0x17, 0x03, 0x03, 0x00, 0x1a, 0x83, 0x2a, 0x5f, 0xd2, 0x71, 0xb6,
    0x44, 0x2e, 0x74, 0xbc, 0x02, 0x11, 0x1a, 0x8e, 0x8b, 0x52, 0xa7,
    0x4b, 0x14, 0xdd, 0x3e, 0xca, 0x85, 0x98, 0xb2, 0x93};
static std::vector<uint8_t> chacha_poly_record_two_bytes = {
    0x17, 0x03, 0x03, 0x00, 0x1a, 0x0c, 0xed, 0xeb, 0x92, 0x21, 0x70,
    0xc1, 0x10, 0xc1, 0x72, 0x26, 0x25, 0x42, 0xc6, 0x79, 0x16, 0xb7,
    0x8f, 0xa0, 0xd1, 0xc1, 0x26, 0x17, 0x09, 0xcd, 0x00};

/** The record_three vectors are obtained by encrypting the plaintext "7891"
 *  using the above keys and the sequence number 2. **/
static std::vector<uint8_t> aes_128_gcm_record_three_bytes = {
    0x17, 0x03, 0x03, 0x00, 0x15, 0xaf, 0x77, 0x8b, 0xe,
    0xd6, 0x6e, 0xfe, 0xe7, 0x13, 0xfb, 0xed, 0xa2, 0x35,
    0x7b, 0x83, 0x2f, 0x75, 0x95, 0x00, 0xee, 0xcd};
static std::vector<uint8_t> aes_256_gcm_record_three_bytes = {
    0x17, 0x03, 0x03, 0x00, 0x15, 0x96, 0xcb, 0x84, 0xcc,
    0x5d, 0xbd, 0x27, 0xa5, 0x13, 0xc6, 0xd2, 0x23, 0xcc,
    0x0f, 0x4a, 0x58, 0x40, 0xe1, 0x7e, 0x56, 0xd8};
static std::vector<uint8_t> chacha_poly_record_three_bytes = {
    0x17, 0x03, 0x03, 0x00, 0x15, 0x92, 0x4a, 0x53, 0x43,
    0xcf, 0x1d, 0xc6, 0x95, 0x09, 0x49, 0x41, 0xab, 0xa1,
    0x6c, 0x6c, 0x24, 0x30, 0x5c, 0xc8, 0x40, 0x8a};

/** The following buffers are obtained by encrypting |decrypt_plaintext_1|
 *  using the crypter constructed in |setup_crypter| and the
 *  sequence number 0. **/
static std::vector<uint8_t> decrypt_plaintext_1 = {'1', '2', '3',
                                                   '4', '5', '6'};
static std::vector<uint8_t> aes_128_gcm_decrypt_record_1 = {
    0x17, 0x03, 0x03, 0x00, 0x17, 0xf2, 0xe4, 0xe4, 0x11, 0xac,
    0x67, 0x60, 0xe4, 0xe3, 0xf0, 0x74, 0xa3, 0x65, 0x74, 0xc4,
    0x5e, 0xe4, 0xc1, 0x90, 0x61, 0x03, 0xdb, 0x0d};
static std::vector<uint8_t> aes_256_gcm_decrypt_record_1 = {
    0x17, 0x03, 0x03, 0x00, 0x17, 0x24, 0xef, 0xee, 0x5a, 0xf1,
    0xa6, 0x21, 0x70, 0xad, 0x5a, 0x95, 0xf8, 0x99, 0xd0, 0x38,
    0xb9, 0x65, 0x38, 0x6a, 0x1a, 0x7d, 0xae, 0xd9};
static std::vector<uint8_t> chacha_poly_decrypt_record_1 = {
    0x17, 0x03, 0x03, 0x00, 0x17, 0xc9, 0x47, 0xff, 0xa4, 0x70,
    0x30, 0x43, 0x70, 0x33, 0x8b, 0xb0, 0x7c, 0xe4, 0x68, 0xe6,
    0xb8, 0xa0, 0x94, 0x4a, 0x33, 0x8b, 0xa4, 0x02};

/** The following buffers are obtained by encrypting the alert message
 *  {SSL3_AL_WARNING, SSL3_AD_CLOSE_NOTIFY} using the crypter constructed in
 *  |setup_crypter| and the sequence number 0. **/
static std::vector<uint8_t> aes_128_gcm_decrypt_close_notify = {
    0x17, 0x03, 0x03, 0x00, 0x13, 0xc2, 0xd6, 0xc2, 0x45, 0xfb, 0x80, 0x96,
    0x9d, 0xe1, 0xdd, 0x9d, 0x14, 0x49, 0x92, 0x61, 0xb6, 0x77, 0x35, 0xb0};
static std::vector<uint8_t> aes_256_gcm_decrypt_close_notify = {
    0x17, 0x03, 0x03, 0x00, 0x13, 0x14, 0xdd, 0xc8, 0xf3, 0xb3, 0x85, 0x66,
    0x60, 0xbb, 0x5a, 0xc8, 0x15, 0x33, 0xc1, 0x57, 0x58, 0x2f, 0x8b, 0x4c};
static std::vector<uint8_t> chacha_poly_decrypt_close_notify = {
    0x17, 0x03, 0x03, 0x00, 0x13, 0xf9, 0x75, 0xd9, 0xcb, 0x2f, 0x11, 0x6d,
    0x85, 0xd4, 0xe3, 0x85, 0x9f, 0x52, 0x88, 0xa9, 0xb0, 0x13, 0xd7, 0x78};

/** The following buffers are obtained by encrypting the alert message
 *  {SSL3_AL_WARNING, SSL3_AD_CERTIFICATE_REVOKED} using the crypter
 *  constructed in |setup_crypter| and the sequence number 0. **/
static std::vector<uint8_t> aes_128_gcm_decrypt_alert_other = {
    0x17, 0x03, 0x03, 0x00, 0x13, 0xc2, 0xfa, 0xc2, 0x3f, 0x99, 0x5c, 0xbe,
    0x79, 0xa8, 0xd1, 0xe4, 0xc8, 0xf0, 0x35, 0x3a, 0xfe, 0xfe, 0xaa, 0xc9};
static std::vector<uint8_t> aes_256_gcm_decrypt_alert_other = {
    0x17, 0x03, 0x03, 0x00, 0x13, 0x14, 0xf1, 0xc8, 0x0a, 0xdd, 0x85, 0x19,
    0x3c, 0x95, 0x98, 0x21, 0x9a, 0xe9, 0xdc, 0x26, 0xf2, 0x47, 0x9c, 0xcf};
static std::vector<uint8_t> chacha_poly_decrypt_alert_other = {
    0x17, 0x03, 0x03, 0x00, 0x13, 0xf9, 0x59, 0xd9, 0x6f, 0xed, 0x92, 0xbd,
    0xc7, 0xe8, 0x5e, 0x04, 0xe8, 0x6c, 0x19, 0xea, 0xf1, 0x54, 0xb0, 0x52};

/** The following buffers are obtained by encrypting the alert message
 *  {SSL3_AL_WARNING} using the crypter constructed in
 *  |setup_crypter| and the sequence number 0. **/
static std::vector<uint8_t> aes_128_gcm_decrypt_alert_small = {
    0x17, 0x03, 0x03, 0x00, 0x12, 0xc2, 0xc3, 0x51, 0xfc, 0x48, 0xd9, 0xac,
    0x84, 0xfa, 0x16, 0x5a, 0xdc, 0xc9, 0xa2, 0x6f, 0xfb, 0xc3, 0xc7};
static std::vector<uint8_t> aes_256_gcm_decrypt_alert_small = {
    0x17, 0x03, 0x03, 0x00, 0x12, 0x14, 0xc8, 0x47, 0x61, 0x02, 0xa4, 0x60,
    0xb5, 0xcf, 0x9e, 0x9b, 0xa5, 0x9e, 0x17, 0x26, 0x21, 0x5c, 0xa9};
static std::vector<uint8_t> chacha_poly_decrypt_alert_small = {
    0x17, 0x03, 0x03, 0x00, 0x12, 0xf9, 0x60, 0x6a, 0x83, 0xac, 0x17, 0xb1,
    0x65, 0xa5, 0x1f, 0x3f, 0xe7, 0x64, 0xda, 0x85, 0x60, 0xc7, 0x06};

/** The empty_record vectors are obtained by encrypting an empty plaintext using
 *  the above keys and the sequence number 0. **/
static std::vector<uint8_t> aes_128_gcm_empty_record_bytes = {
    0x17, 0x03, 0x03, 0x00, 0x11, 0xd4, 0x7c, 0xb2, 0xec, 0x04, 0x0f,
    0x26, 0xcc, 0x89, 0x89, 0x33, 0x03, 0x39, 0xc6, 0x69, 0xdd, 0x4e};
static std::vector<uint8_t> aes_256_gcm_empty_record_bytes = {
    0x17, 0x03, 0x03, 0x00, 0x11, 0x02, 0xa0, 0x41, 0x34, 0xd3, 0x8c,
    0x11, 0x18, 0xf3, 0x6b, 0x01, 0xd1, 0x77, 0xc5, 0xd2, 0xdc, 0xf7};
static std::vector<uint8_t> chacha_poly_empty_record_bytes = {
    0x17, 0x03, 0x03, 0x00, 0x11, 0xef, 0x8f, 0x7a, 0x42, 0x8d, 0xdc,
    0x84, 0xee, 0x59, 0x68, 0xcd, 0x63, 0x06, 0xbf, 0x1d, 0x2d, 0x1b};

static std::vector<uint8_t> key_update_message = {24, 0, 0, 1, 0};

static std::vector<uint8_t> test_message_1 = {};

static std::vector<uint8_t> test_message_2 = {8};

static std::vector<uint8_t> test_message_3 = {
    46, 98, 101, 255, 213, 156, 15, 100, 126, 45, 130, 239, 209, 13, 156, 89};

static std::vector<uint8_t> test_message_4(1500, 'm');

static std::vector<uint8_t> test_message_5(16384, 's');

static std::vector<uint8_t> message_encrypted_with_padded_zeros = {
    '1', '2', '3', '4', '5', '6'};

static std::vector<uint8_t> aes_128_gcm_padded_zeros_record = {
    23,  3,   3,   0,   33,  242, 228, 228, 17,  172, 103, 96,  232,
    71,  38,  228, 136, 109, 116, 50,  227, 155, 52,  240, 252, 207,
    193, 244, 85,  131, 3,   198, 138, 25,  83,  92,  15,  245};
static std::vector<uint8_t> aes_256_gcm_padded_zeros_record = {
    23,  3,   3,   0,   33,  36,  239, 238, 90,  241, 166, 33,  232,
    164, 209, 242, 105, 147, 14,  120, 53,  207, 221, 5,   226, 208,
    190, 197, 176, 26,  103, 222, 207, 166, 55,  44,  42,  247};
static std::vector<uint8_t> chacha_poly_padded_zeros_record = {
    23, 3,   3,   0,   33,  201, 71,  255, 164, 112, 48,  67,  240,
    99, 231, 182, 160, 81,  159, 189, 9,   86,  207, 58,  124, 151,
    48, 193, 53,  151, 238, 193, 126, 199, 231, 0,   241, 64};

}  // namespace s2a_test_data

#endif  // GRPC_TEST_CORE_TSI_S2A_S2A_TEST_DATA_H
